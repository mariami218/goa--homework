#1)# Indexing (ინდექსირება):
# Indexing გამოიყენება სიის ან სტრიქონის ერთ კონკრეტულ ელემენტზე წვდომისთვის.
# ინდექსები იწყება 0-დან. დადებითი ინდექსები მარცხნიდან იწყება, ხოლო უარყოფითი - მარჯვნიდან.
# მაგალითად, თუ გვაქვს სია [10, 20, 30, 40]:
# - my_list[0] გამოიტანს 10-ს (პირველი ელემენტი).
# - my_list[-1] გამოიტანს 40-ს (ბოლო ელემენტი).

my_list = [10, 20, 30, 40]
print(my_list[1])   # გამოსავალი: 20 (მეორე ელემენტი)
print(my_list[-2])  # გამოსავალი: 30 (ბოლო წინა ელემენტი)

# Slicing (სექცირება):
# Slicing გამოიყენება სიის ან სტრიქონის ქვეცელების (სუბსიის) შესაქმნელად.
# სექცირება მოიცავს დიაპაზონს, რომელსაც ვწერთ [start:end] ფორმატში.
# Start ინდექსი შედის, ხოლო End ინდექსი არ შედის (ანუ end ჩათვლით არ გამოაქვს).
# შესაძლებელია გამოვიყენოთ ნაბიჯის მნიშვნელობა [start:end:step].
# მაგალითად, თუ გვაქვს სია [10, 20, 30, 40]:
# - my_list[1:3] გამოიტანს [20, 30] (მეორე და მესამე ელემენტები).
# - my_list[-3:] გამოიტანს [20, 30, 40] (ბოლო სამი ელემენტი).

my_list = [10, 20, 30, 40]
print(my_list[1:3])   # გამოსავალი: [20, 30] (მეორე და მესამე ელემენტები)
print(my_list[-3:])   # გამოსავალი: [20, 30, 40] (ბოლო სამი ელემენტი)
print(my_list[::2])   # გამოსავალი: [10, 30] (ნაბიჯი 2)

# ძირითადი განსხვავება:
# - Indexing იძლევა კონკრეტულ ელემენტზე წვდომას.
# - Slicing იძლევა ელემენტების დიაპაზონის მიღებას.


#2)"შექმენით სია სადაც გექნებათ 5 ელემენტი და მინუს ინდექსების გამოყენებით გამოიტანეთ ბოლო 3 ელემენტი"
my_list[45,60,30,50,20]
print(my_list(-3))


 #4)  # რა არის ფუნქცია?
# ფუნქცია არის კოდის ბლოკი, რომელსაც აქვს კონკრეტული ამოცანა. 
# იგი შეიძლება იყოს განმეორებადი და ხელახლა გამოსაყენებელი. 
# ფუნქციის მთავარი მიზანია, რომ კოდი იყოს ორგანიზებული, კომპაქტური და მარტივი გამოსაყენებელი.

# რისთვის ვიყენებთ ფუნქციას?
# - კოდის გამარტივებისთვის და დუბლირების თავიდან ასაცილებლად.
# - მონაცემების ან პროცესების განმეორებითი შესრულებისთვის.
# - რთული ოპერაციების შესასრულებლად მარტივი ფორმით.

# ნასწავლი ფუნქციები და მათი დანიშნულება:

 #1. print() - ინფორმაციის ეკრანზე გამოსატანად.
#    მაგალითი: print("Hello, World!")

# 2. input() - მომხმარებლისგან მონაცემის მიღება.
#    მაგალითი: name = input("Enter your name: ")

# 3. len() - ობიექტის სიგრძის (ელემენტების რაოდენობის) გასაგებად.
#    მაგალითი: length = len([1, 2, 3])

# 4. int() - სტრიქონის ან რიცხვის მთელ რიცხვად გადაყვანა.
#    მაგალითი: number = int("10")

# 5. str() - რიცხვის ან ობიექტის სტრიქონად გადაყვანა.
#    მაგალითი: text = str(123)

# 6. list() - ობიექტის სიად გარდაქმნა.
#    მაგალითი: my_list = list("abc")  # ['a', 'b', 'c']

# 7. range() - რიცხვების დიაპაზონის შესაქმნელად.
#    მაგალითი: for i in range(5): print(i)  # 0-დან 4-მდე

# 8. sum() - სიის ან iterable-ის ელემენტების ჯამის გამოსათვლელად.
#    მაგალითი: total = sum([1, 2, 3])  # 6

# 9. max() - სიის ან iterable-ის უდიდესი მნიშვნელობის დასაბრუნებლად.
#    მაგალითი: largest = max([1, 5, 3])  # 5

# 10. min() - სიის ან iterable-ის უმცირესი მნიშვნელობის დასაბრუნებლად.
#     მაგალითი: smallest = min([1, 5, 3])  # 1

# 11. type() - ობიექტის ტიპის გასაგებად.
#     მაგალითი: print(type(123))  # <class 'int'>

# 12. sorted() - სიის ან iterable-ის დალაგებისთვის.
#     მაგალითი: sorted_list = sorted([3, 1, 2])  # [1, 2, 3]




#5)  # Step 1: მომხმარებლისგან გვარის მიღება

last_name = input("Please enter your last name: ")

# Step 2: მომხმარებელს ვეკითხებით, სურს თუ არა გვარის დიდ ასოებად გადაყვანა

response = input("would you like to convert your lasr name uppercase (yes/no):").lower()

# Step 3: პასუხის მიხედვით მოქმედება

if response == "yes": 
    print(f"your  last name in uppercase is:{last_name.upper()}") 

elif response =="no":

    print(f"your name in uppercase is:{last_name()}")
else:
    print("invalid responde.please enter 'yes' or 'no")   
